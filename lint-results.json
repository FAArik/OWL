[{"filePath":"/home/z/my-project/.next/types/cache-life.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/admin-playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/ecosystem.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/examples/websocket/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/scripts/check-all-tables.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { PrismaClient } = require('@prisma/client');\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log('Checking all database tables...');\n\n  try {\n    await prisma.$connect();\n    console.log('Database connected successfully');\n\n    // Check all tables\n    const tables = [\n      'user', 'post', 'community', 'privateGroup', 'communityMember', \n      'groupMember', 'follow', 'comment', 'like', 'pool', 'poolCategory',\n      'notification', 'report', 'userBlock', 'userMute', 'moderationAction',\n      'appeal', 'contentFilter', 'adminActivityLog'\n    ];\n\n    for (const table of tables) {\n      try {\n        // Try to count records in each table\n        const modelName = table.charAt(0).toUpperCase() + table.slice(1);\n        const result = await prisma[table].count();\n        console.log(`✓ ${table} table exists with ${result} records`);\n      } catch (error) {\n        console.log(`✗ ${table} table: ${error.message}`);\n      }\n    }\n\n    console.log('Database schema check completed');\n  } catch (error) {\n    console.error('Database connection error:', error);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });","usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/scripts/check-db.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { PrismaClient } = require('@prisma/client');\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log('Seeding database...');\n\n  try {\n    // Test database connection\n    await prisma.$connect();\n    console.log('Database connected successfully');\n\n    // Check if tables exist by trying to query them\n    try {\n      await prisma.user.findMany();\n      console.log('Users table exists');\n    } catch (error) {\n      console.log('Users table does not exist, creating schema...');\n    }\n\n    console.log('Database schema check completed');\n  } catch (error) {\n    console.error('Database connection error:', error);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });","usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/security-test.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/server-production.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":66,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":66,"endColumn":52},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":83,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":83,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport next from 'next';\nimport { createServer } from 'http';\nimport { parse } from 'url';\nimport { Server } from 'socket.io';\nimport { setupSocket } from './src/lib/socket';\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst hostname = process.env.HOSTNAME || '0.0.0.0';\nconst port = parseInt(process.env.PORT || '3000', 10);\n\n// When using middleware `hostname` and `port` must be provided below\nconst app = next({ dev, hostname, port });\nconst handler = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const expressApp = express();\n  const server = createServer(expressApp);\n  \n  // Setup Socket.IO\n  const io = new Server(server, {\n    cors: {\n      origin: process.env.NODE_ENV === 'production' \n        ? process.env.CORS_ORIGIN || process.env.NEXT_PUBLIC_APP_URL\n        : '*',\n      methods: ['GET', 'POST'],\n      credentials: true\n    },\n    transports: ['websocket', 'polling'],\n    pingTimeout: 60000,\n    pingInterval: 25000\n  });\n\n  // Setup socket handlers\n  setupSocket(io);\n\n  // Security middleware for production\n  if (!dev) {\n    // Trust proxy for proper IP logging\n    expressApp.set('trust proxy', 1);\n    \n    // Security headers\n    expressApp.use((req, res, next) => {\n      // Remove X-Powered-By header\n      res.removeHeader('X-Powered-By');\n      \n      // Prevent clickjacking\n      res.setHeader('X-Frame-Options', 'DENY');\n      \n      // Prevent MIME type sniffing\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      \n      // Enable XSS protection\n      res.setHeader('X-XSS-Protection', '1; mode=block');\n      \n      // Referrer policy\n      res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n      \n      // Permissions policy\n      res.setHeader('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n      \n      next();\n    });\n\n    // Rate limiting middleware (basic implementation)\n    const rateLimit = require('express-rate-limit');\n    \n    const limiter = rateLimit({\n      windowMs: parseInt(process.env.RATE_LIMIT_WINDOW || '60000'),\n      max: parseInt(process.env.RATE_LIMIT_REQUESTS || '100'),\n      message: {\n        error: 'Too many requests from this IP, please try again later.'\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n    });\n\n    // Apply rate limiting to API routes\n    expressApp.use('/api', limiter);\n  }\n\n  // Compression middleware\n  const compression = require('compression');\n  expressApp.use(compression({\n    level: 6,\n    threshold: 1024,\n    filter: (req: any, res: any) => {\n      if (req.headers['x-no-compression']) {\n        return false;\n      }\n      return compression.filter(req, res);\n    }\n  }));\n\n  // Body parsing middleware\n  expressApp.use(express.json({ limit: '10mb' }));\n  expressApp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n  // Static file serving with cache headers\n  expressApp.use('/_next/static', express.static('.next/static', {\n    maxAge: dev ? 0 : 365 * 24 * 60 * 60 * 1000, // 1 year\n    immutable: true,\n    setHeaders: (res, path) => {\n      if (path.endsWith('.css') || path.endsWith('.js')) {\n        res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');\n      }\n    }\n  }));\n\n  // Health check endpoint\n  expressApp.get('/health', (req, res) => {\n    res.status(200).json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,\n      version: process.env.npm_package_version || 'unknown'\n    });\n  });\n\n  // Ready check endpoint (includes database check)\n  expressApp.get('/ready', async (req, res) => {\n    try {\n      // Add database health check here if needed\n      res.status(200).json({\n        status: 'ready',\n        timestamp: new Date().toISOString(),\n        checks: {\n          database: 'healthy',\n          websocket: 'healthy'\n        }\n      });\n    } catch (error) {\n      res.status(503).json({\n        status: 'not ready',\n        timestamp: new Date().toISOString(),\n        error: 'Database connection failed'\n      });\n    }\n  });\n\n  // Metrics endpoint (for monitoring)\n  expressApp.get('/metrics', (req, res) => {\n    const metrics = {\n      memory: process.memoryUsage(),\n      uptime: process.uptime(),\n      timestamp: Date.now(),\n      nodeVersion: process.version,\n      platform: process.platform,\n      arch: process.arch\n    };\n    \n    res.status(200).json(metrics);\n  });\n\n  // Handle all other requests with Next.js\n  expressApp.all('*', (req, res) => {\n    const parsedUrl = parse(req.url, true);\n    \n    // Add request logging in production\n    if (!dev) {\n      console.log(`${new Date().toISOString()} ${req.method} ${req.url}`);\n    }\n    \n    handler(req, res, parsedUrl);\n  });\n\n  // Error handling middleware\n  expressApp.use((err: any, req: any, res: any, next: any) => {\n    console.error('Application error:', err);\n    \n    if (!dev) {\n      // In production, don't leak error details\n      res.status(500).json({\n        error: 'Internal Server Error',\n        requestId: req.headers['x-request-id'] || 'unknown'\n      });\n    } else {\n      // In development, send full error details\n      res.status(500).json({\n        error: err.message,\n        stack: err.stack\n      });\n    }\n  });\n\n  // Graceful shutdown\n  const gracefulShutdown = (signal: string) => {\n    console.log(`Received ${signal}. Starting graceful shutdown...`);\n    \n    server.close(() => {\n      console.log('Server closed. Exiting process.');\n      process.exit(0);\n    });\n    \n    // Force close after timeout\n    setTimeout(() => {\n      console.error('Could not close connections in time, forcefully shutting down');\n      process.exit(1);\n    }, 10000);\n  };\n\n  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n  process.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\n  // Handle uncaught exceptions\n  process.on('uncaughtException', (err) => {\n    console.error('Uncaught Exception:', err);\n    gracefulShutdown('uncaughtException');\n  });\n\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    gracefulShutdown('unhandledRejection');\n  });\n\n  server.listen(port, hostname, () => {\n    console.log(`> Server listening at http://${hostname}:${port} as ${dev ? 'development' : 'production'}`);\n    console.log(`> Environment: ${process.env.NODE_ENV}`);\n    console.log(`> Health check: http://${hostname}:${port}/health`);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/communities/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/discover/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/following/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/moderation/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/privacy/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/saved/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/[locale]/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/admin/activity-logs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/admin/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/admin/stats/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/admin/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/appeals/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/appeals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/auth/2fa/generate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/auth/2fa/verify/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/auth/parental-consent/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/auth/parental-consent/verify/[token]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/blocks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/blocks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/comments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/communities/[id]/join/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/communities/[id]/posts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/communities/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/communities/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/content-filters/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/content-filters/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/follow/[id]/status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/follow/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/groups/[id]/invite/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/groups/[id]/posts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/groups/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/groups/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/likes/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/mutes/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/mutes/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/notifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/pool-categories/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/pool-categories/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/pools/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/pools/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/posts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/recommendations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/reports/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/reports/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/test-db/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/user/data/delete/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/user/data/export/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/user/preferences/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/users/[id]/followers/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/users/[id]/following/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/users/posts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/users/profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/api/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/landing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/DebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/admin/AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/admin/Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/admin/ContentModeration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/admin/UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/AgeVerification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/AuthGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/GuestAccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/LoginButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/TwoFactorSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/auth/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/CommunityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/CommunityCreateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/CommunityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/GroupCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/GroupCreateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/GroupFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/communities/GroupInviteDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/content/CommentDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/content/ContentInteraction.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/content/PostCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/content/PostCreationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/layout/MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/layout/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/lazy/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/AppealDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/AppealsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/ContentFilterManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/ModerationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/ReportDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/moderation/UserControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/notifications/NotificationDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/pools/PoolItemActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/pools/PoolManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/pools/SavedPostCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/pools/SavedPosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/privacy/ConsentManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/privacy/DataControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/accessible-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/accessible-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/accessible-navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/font-size-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/language-switcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/optimized-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/theme-loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/components/user/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/contexts/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/contexts/FontSizeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/contexts/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/accessibility.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/apiDebug.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/contentFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/debug.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/encryption.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/imageOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/lazyLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/rateLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/sessionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/socket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/lib/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/src/types/next-auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/test-admin-discoverability.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":8,"column":15,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":8,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":9,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":10,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":11,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":11,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Simple test script to validate admin panel discoverability security measures\n * This script performs basic checks to ensure the admin panel is properly hidden\n */\n\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration\nconst BASE_URL = 'http://localhost:3000';\nconst ADMIN_URL = `${BASE_URL}/admin`;\nconst API_ADMIN_URLS = [\n  `${BASE_URL}/api/admin/users`,\n  `${BASE_URL}/api/admin/stats`,\n  `${BASE_URL}/api/admin/analytics`,\n  `${BASE_URL}/api/admin/activity-logs`\n];\n\n// Colors for output\nconst colors = {\n  reset: '\\x1b[0m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n};\n\nfunction log(message, color = 'reset') {\n  console.log(`${colors[color]}${message}${colors.reset}`);\n}\n\nfunction logTest(testName, passed, details = '') {\n  const status = passed ? '✓ PASS' : '✗ FAIL';\n  const color = passed ? 'green' : 'red';\n  log(`${status}: ${testName}`, color);\n  if (details) {\n    log(`  ${details}`, 'cyan');\n  }\n}\n\n// Helper function to make HTTP requests\nfunction makeRequest(url, method = 'GET', headers = {}) {\n  return new Promise((resolve, reject) => {\n    const urlObj = new URL(url);\n    const isHttps = urlObj.protocol === 'https:';\n    const client = isHttps ? https : http;\n    \n    const options = {\n      hostname: urlObj.hostname,\n      port: urlObj.port || (isHttps ? 443 : 80),\n      path: urlObj.pathname + urlObj.search,\n      method: method,\n      headers: {\n        'User-Agent': 'Security-Test-Agent/1.0',\n        ...headers\n      }\n    };\n\n    const req = client.request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => data += chunk);\n      res.on('end', () => {\n        resolve({\n          status: res.statusCode,\n          headers: res.headers,\n          data: data\n        });\n      });\n    });\n\n    req.on('error', reject);\n    req.end();\n  });\n}\n\n// Test functions\nasync function testRobotsTxt() {\n  log('Testing robots.txt exclusion...', 'blue');\n  \n  try {\n    const response = await makeRequest(`${BASE_URL}/robots.txt`);\n    \n    if (response.status === 200) {\n      const hasAdminDisallow = response.data.includes('Disallow: /admin');\n      const hasApiAdminDisallow = response.data.includes('Disallow: /api/admin');\n      \n      logTest('robots.txt contains admin disallow rules', hasAdminDisallow && hasApiAdminDisallow);\n      \n      if (!hasAdminDisallow) {\n        logTest('  Missing: Disallow: /admin', false);\n      }\n      if (!hasApiAdminDisallow) {\n        logTest('  Missing: Disallow: /api/admin', false);\n      }\n      \n      return hasAdminDisallow && hasApiAdminDisallow;\n    } else {\n      logTest('robots.txt accessible', false, `Status: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    logTest('robots.txt request failed', false, error.message);\n    return false;\n  }\n}\n\nasync function testDirectAdminAccess() {\n  log('Testing direct admin access...', 'blue');\n  \n  try {\n    const response = await makeRequest(ADMIN_URL);\n    \n    // Should return either 404 (ideal) or 200 with access denied content\n    const isNotFound = response.status === 404;\n    const hasAccessDenied = response.data.includes('Access Denied');\n    const hasAdminDashboard = response.data.includes('admin-dashboard');\n    \n    logTest('Direct admin access returns proper response', isNotFound || response.status === 200);\n    \n    if (isNotFound) {\n      logTest('Admin panel returns 404 (excellent security)', true);\n    } else if (hasAccessDenied) {\n      logTest('Access denied message shown', true);\n    } else {\n      logTest('Access denied message not found', false);\n    }\n    \n    logTest('Admin dashboard not exposed', !hasAdminDashboard);\n    \n    return (isNotFound || (response.status === 200 && hasAccessDenied)) && !hasAdminDashboard;\n  } catch (error) {\n    logTest('Direct admin access test failed', false, error.message);\n    return false;\n  }\n}\n\nasync function testAdminApiAccess() {\n  log('Testing admin API access...', 'blue');\n  \n  let allPassed = true;\n  \n  for (const url of API_ADMIN_URLS) {\n    try {\n      const response = await makeRequest(url);\n      const isUnauthorized = response.status === 401 || response.status === 403;\n      const noSensitiveData = !response.data.includes('users') && !response.data.includes('stats');\n      \n      logTest(`API ${url.split('/').pop()} endpoint protected`, isUnauthorized);\n      \n      if (!isUnauthorized) {\n        allPassed = false;\n        log(`  Status: ${response.status}`, 'yellow');\n        log(`  Data length: ${response.data.length} bytes`, 'yellow');\n      }\n    } catch (error) {\n      logTest(`API ${url.split('/').pop()} endpoint test failed`, false, error.message);\n      allPassed = false;\n    }\n  }\n  \n  return allPassed;\n}\n\nasync function testSecurityHeaders() {\n  log('Testing security headers...', 'blue');\n  \n  try {\n    const response = await makeRequest(ADMIN_URL);\n    const headers = response.headers;\n    \n    const expectedHeaders = {\n      'x-frame-options': 'DENY',\n      'x-content-type-options': 'nosniff',\n      'x-xss-protection': '1; mode=block',\n      'x-robots-tag': 'noindex, nofollow'\n    };\n    \n    let allPassed = true;\n    \n    for (const [header, expectedValue] of Object.entries(expectedHeaders)) {\n      const actualValue = headers[header];\n      const passed = actualValue === expectedValue;\n      \n      logTest(`${header} header`, passed, passed ? '' : `Expected: ${expectedValue}, Got: ${actualValue}`);\n      \n      if (!passed) {\n        allPassed = false;\n      }\n    }\n    \n    return allPassed;\n  } catch (error) {\n    logTest('Security headers test failed', false, error.message);\n    return false;\n  }\n}\n\nasync function testUrlEnumeration() {\n  log('Testing URL enumeration...', 'blue');\n  \n  const adminVariations = [\n    '/admin',\n    '/admin/',\n    '/admin/dashboard',\n    '/admin/login',\n    '/admin/panel',\n    '/administrator',\n    '/administration',\n    '/wp-admin',\n    '/admin.php',\n    '/admin.html'\n  ];\n  \n  let allPassed = true;\n  \n  for (const path of adminVariations) {\n    try {\n      const response = await makeRequest(`${BASE_URL}${path}`);\n      const hasAdminContent = response.data.includes('admin-dashboard') || \n                             response.data.includes('admin-panel');\n      \n      // Should either return non-200 or return 200 without admin content\n      const passed = response.status !== 200 || !hasAdminContent;\n      \n      logTest(`URL ${path}`, passed, passed ? '' : `Status: ${response.status}, Contains admin content: ${hasAdminContent}`);\n      \n      if (!passed) {\n        allPassed = false;\n      }\n    } catch (error) {\n      // Connection errors are acceptable for enumeration tests\n      logTest(`URL ${path}`, true, 'Connection failed (acceptable)');\n    }\n  }\n  \n  return allPassed;\n}\n\nasync function testClientSideReferences() {\n  log('Testing client-side references...', 'blue');\n  \n  try {\n    const response = await makeRequest(BASE_URL);\n    const pageContent = response.data.toLowerCase();\n    \n    const adminReferences = [\n      'href=\"/admin\"',\n      'admin-panel',\n      'administration',\n      'admin-dashboard'\n    ];\n    \n    let foundReferences = [];\n    \n    for (const reference of adminReferences) {\n      if (pageContent.includes(reference)) {\n        foundReferences.push(reference);\n      }\n    }\n    \n    const passed = foundReferences.length === 0;\n    \n    logTest('No admin references in client-side code', passed);\n    \n    if (!passed) {\n      log(`  Found references: ${foundReferences.join(', ')}`, 'yellow');\n    }\n    \n    return passed;\n  } catch (error) {\n    logTest('Client-side references test failed', false, error.message);\n    return false;\n  }\n}\n\n// Main test runner\nasync function runTests() {\n  log('🔒 Admin Panel Discoverability Security Tests', 'magenta');\n  log('=============================================', 'magenta');\n  log('');\n  \n  const tests = [\n    { name: 'robots.txt Exclusion', test: testRobotsTxt },\n    { name: 'Direct Admin Access', test: testDirectAdminAccess },\n    { name: 'Admin API Access', test: testAdminApiAccess },\n    { name: 'Security Headers', test: testSecurityHeaders },\n    { name: 'URL Enumeration', test: testUrlEnumeration },\n    { name: 'Client-side References', test: testClientSideReferences }\n  ];\n  \n  let passedTests = 0;\n  let totalTests = tests.length;\n  \n  for (const { name, test } of tests) {\n    log(`\\n📋 Running: ${name}`, 'blue');\n    log(''.padEnd(50, '-'), 'cyan');\n    \n    try {\n      const passed = await test();\n      if (passed) {\n        passedTests++;\n      }\n    } catch (error) {\n      logTest(`${name} crashed`, false, error.message);\n    }\n    \n    log(''.padEnd(50, '-'), 'cyan');\n  }\n  \n  // Summary\n  log('\\n📊 Test Summary', 'magenta');\n  log(''.padEnd(50, '='), 'magenta');\n  log(`Passed: ${passedTests}/${totalTests}`, passedTests === totalTests ? 'green' : 'yellow');\n  log(`Failed: ${totalTests - passedTests}/${totalTests}`, totalTests - passedTests === 0 ? 'green' : 'red');\n  log(`Success Rate: ${Math.round((passedTests / totalTests) * 100)}%`, passedTests === totalTests ? 'green' : 'yellow');\n  \n  if (passedTests === totalTests) {\n    log('\\n🎉 All security tests passed! Admin panel is properly secured.', 'green');\n  } else {\n    log('\\n⚠️  Some security tests failed. Review the issues above.', 'yellow');\n    log('   Admin panel may be discoverable by unauthorized users.', 'red');\n  }\n  \n  log('\\n💡 Recommendations:', 'cyan');\n  log('   - Run the full Playwright test suite for comprehensive testing', 'cyan');\n  log('   - Regular security testing is recommended', 'cyan');\n  log('   - Monitor admin access logs in production', 'cyan');\n  \n  process.exit(passedTests === totalTests ? 0 : 1);\n}\n\n// Check if server is running\nasync function checkServer() {\n  try {\n    await makeRequest(BASE_URL);\n    return true;\n  } catch (error) {\n    log('❌ Server not accessible at http://localhost:3000', 'red');\n    log('   Please ensure the development server is running:', 'yellow');\n    log('   npm run dev', 'cyan');\n    return false;\n  }\n}\n\n// Main execution\nasync function main() {\n  const serverRunning = await checkServer();\n  if (!serverRunning) {\n    process.exit(1);\n  }\n  \n  await runTests();\n}\n\n// Handle unhandled rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  log('Unhandled Rejection at:', reason, 'red');\n  process.exit(1);\n});\n\nprocess.on('uncaughtException', (error) => {\n  log('Uncaught Exception:', error, 'red');\n  process.exit(1);\n});\n\n// Run the tests\nmain();","usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/admin-security/panel-hidden.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/auth/google-signin.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/auth/guest-access.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/auth/onboarding.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/communities/creation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/content/image-compression.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/content/interactions.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/content/post-creation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/discovery/search.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/global-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/global-teardown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/performance/page-loads.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/simple-smoke.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/smoke.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/utils/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/utils/test-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/z/my-project/tests/e2e/utils/test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]